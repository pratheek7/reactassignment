{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { usePrefix } from '../../internal/usePrefix.js';\nvar _excluded = [\"children\", \"disabled\", \"tabIndex\"];\n/**\n * `ListBoxField` is responsible for creating the containing node for valid\n * elements inside of a field. It also provides a11y-related attributes like\n * `role` to make sure a user can focus the given field.\n */\n\nfunction ListBoxField(_ref) {\n  var children = _ref.children,\n    disabled = _ref.disabled,\n    tabIndex = _ref.tabIndex,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    className: \"\".concat(prefix, \"--list-box__field\"),\n    tabIndex: !disabled && tabIndex || -1\n  }, rest), children);\n}\nListBoxField.propTypes = {\n  /**\n   * Typically set by `getToggleButtonProps`, this should specify whether the\n   * field has a popup.\n   */\n  'aria-haspopup': PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  /**\n   * Provide the contents of your ListBoxField\n   */\n  children: PropTypes.node,\n  /**\n   * Specify if the parent <ListBox> is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The role for the component, should be set by `getToggleButtonProps` coming\n   * from Downshift\n   */\n  role: PropTypes.string,\n  /**\n   * Optional prop to specify the tabIndex of the <ListBox> trigger button\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nexport { ListBoxField as default };","map":{"version":3,"names":["objectWithoutProperties","_objectWithoutProperties","extends","_extends","React__default","PropTypes","usePrefix","_excluded","ListBoxField","_ref","children","disabled","tabIndex","rest","prefix","createElement","className","concat","propTypes","oneOfType","string","bool","node","role","number","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/ListBox/ListBoxField.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default from 'react';\nimport PropTypes from 'prop-types';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\nvar _excluded = [\"children\", \"disabled\", \"tabIndex\"];\n/**\n * `ListBoxField` is responsible for creating the containing node for valid\n * elements inside of a field. It also provides a11y-related attributes like\n * `role` to make sure a user can focus the given field.\n */\n\nfunction ListBoxField(_ref) {\n  var children = _ref.children,\n      disabled = _ref.disabled,\n      tabIndex = _ref.tabIndex,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    className: \"\".concat(prefix, \"--list-box__field\"),\n    tabIndex: !disabled && tabIndex || -1\n  }, rest), children);\n}\n\nListBoxField.propTypes = {\n  /**\n   * Typically set by `getToggleButtonProps`, this should specify whether the\n   * field has a popup.\n   */\n  'aria-haspopup': PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /**\n   * Provide the contents of your ListBoxField\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify if the parent <ListBox> is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The role for the component, should be set by `getToggleButtonProps` coming\n   * from Downshift\n   */\n  role: PropTypes.string,\n\n  /**\n   * Optional prop to specify the tabIndex of the <ListBox> trigger button\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\n\nexport { ListBoxField as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,uBAAuB,IAAIC,wBAAwB,EAAEC,OAAO,IAAIC,QAAQ,QAAQ,6CAA6C;AACtI,OAAOC,cAAc,MAAM,OAAO;AAClC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,QAAQ,6BAA6B;AAEvD,IAAIC,SAAS,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;AACpD;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAY,CAACC,IAAI,EAAE;EAC1B,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IACxBC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;IACxBC,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IACxBC,IAAI,GAAGZ,wBAAwB,CAACQ,IAAI,EAAEF,SAAS,CAAC;EAEpD,IAAIO,MAAM,GAAGR,SAAS,EAAE;EACxB,OAAO,aAAaF,cAAc,CAACW,aAAa,CAAC,KAAK,EAAEZ,QAAQ,CAAC;IAC/Da,SAAS,EAAE,EAAE,CAACC,MAAM,CAACH,MAAM,EAAE,mBAAmB,CAAC;IACjDF,QAAQ,EAAE,CAACD,QAAQ,IAAIC,QAAQ,IAAI,CAAC;EACtC,CAAC,EAAEC,IAAI,CAAC,EAAEH,QAAQ,CAAC;AACrB;AAEAF,YAAY,CAACU,SAAS,GAAG;EACvB;AACF;AACA;AACA;EACE,eAAe,EAAEb,SAAS,CAACc,SAAS,CAAC,CAACd,SAAS,CAACe,MAAM,EAAEf,SAAS,CAACgB,IAAI,CAAC,CAAC;EAExE;AACF;AACA;EACEX,QAAQ,EAAEL,SAAS,CAACiB,IAAI;EAExB;AACF;AACA;EACEX,QAAQ,EAAEN,SAAS,CAACgB,IAAI;EAExB;AACF;AACA;AACA;EACEE,IAAI,EAAElB,SAAS,CAACe,MAAM;EAEtB;AACF;AACA;EACER,QAAQ,EAAEP,SAAS,CAACc,SAAS,CAAC,CAACd,SAAS,CAACmB,MAAM,EAAEnB,SAAS,CAACe,MAAM,CAAC;AACpE,CAAC;AAED,SAASZ,YAAY,IAAIiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}