{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { slicedToArray as _slicedToArray } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useRef, useEffect } from 'react';\nimport { warning } from './warning.js';\n\n/**\n * This custom hook simplifies the behavior of a component if it has state that\n * can be both controlled and uncontrolled. It functions identical to a\n * useState() hook and provides [state, setState] for you to use. You can use\n * the `onChange` argument to allow updates to the `state` to be communicated to\n * owners of controlled components.\n *\n * Note: this hook will warn if a component is switching from controlled to\n * uncontrolled, or vice-versa.\n *\n * @param {object} config\n * @param {string} config.name - the name of the custom component\n * @param {any} config.defaultValue - the default value used for the state. This will be\n * the fallback value used if `value` is not defined.\n * @param {Function} config.onChange - an optional function that is called when\n * the value of the state changes. This is useful for communicating to parents of\n * controlled components that the value is requesting to be changed.\n * @param {any} config.value - a controlled value. Omitting this means that the state is\n * uncontrolled\n * @returns {[any, Function]}\n */\n\nfunction useControllableState(_ref) {\n  var defaultValue = _ref.defaultValue,\n    _ref$name = _ref.name,\n    name = _ref$name === void 0 ? 'custom' : _ref$name,\n    onChange = _ref.onChange,\n    value = _ref.value;\n  var _useState = useState(value !== null && value !== void 0 ? value : defaultValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    internalSetState = _useState2[1];\n  var controlled = useRef(null);\n  if (controlled.current === null) {\n    controlled.current = value !== undefined;\n  }\n  function setState(stateOrUpdater) {\n    var value = typeof stateOrUpdater === 'function' ? stateOrUpdater(state) : stateOrUpdater;\n    if (controlled.current === false) {\n      internalSetState(value);\n    }\n    if (onChange) {\n      onChange(value);\n    }\n  }\n  useEffect(function () {\n    var controlledValue = value !== undefined; // Uncontrolled -> Controlled\n    // If the component prop is uncontrolled, the prop value should be undefined\n\n    if (controlled.current === false && controlledValue) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'A component is changing an uncontrolled %s component to be controlled. ' + 'This is likely caused by the value changing to a defined value ' + 'from undefined. Decide between using a controlled or uncontrolled ' + 'value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components', name) : void 0;\n    } // Controlled -> Uncontrolled\n    // If the component prop is controlled, the prop value should be defined\n\n    if (controlled.current === true && !controlledValue) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'A component is changing a controlled %s component to be uncontrolled. ' + 'This is likely caused by the value changing to an undefined value ' + 'from a defined one. Decide between using a controlled or ' + 'uncontrolled value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components', name) : void 0;\n    }\n  }, [name, value]);\n  if (controlled.current === true) {\n    return [value, setState];\n  }\n  return [state, setState];\n}\nexport { useControllableState };","map":{"version":3,"names":["slicedToArray","_slicedToArray","useState","useRef","useEffect","warning","useControllableState","_ref","defaultValue","_ref$name","name","onChange","value","_useState","_useState2","state","internalSetState","controlled","current","undefined","setState","stateOrUpdater","controlledValue","process","env","NODE_ENV"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/internal/useControllableState.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { slicedToArray as _slicedToArray } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useRef, useEffect } from 'react';\nimport { warning } from './warning.js';\n\n/**\n * This custom hook simplifies the behavior of a component if it has state that\n * can be both controlled and uncontrolled. It functions identical to a\n * useState() hook and provides [state, setState] for you to use. You can use\n * the `onChange` argument to allow updates to the `state` to be communicated to\n * owners of controlled components.\n *\n * Note: this hook will warn if a component is switching from controlled to\n * uncontrolled, or vice-versa.\n *\n * @param {object} config\n * @param {string} config.name - the name of the custom component\n * @param {any} config.defaultValue - the default value used for the state. This will be\n * the fallback value used if `value` is not defined.\n * @param {Function} config.onChange - an optional function that is called when\n * the value of the state changes. This is useful for communicating to parents of\n * controlled components that the value is requesting to be changed.\n * @param {any} config.value - a controlled value. Omitting this means that the state is\n * uncontrolled\n * @returns {[any, Function]}\n */\n\nfunction useControllableState(_ref) {\n  var defaultValue = _ref.defaultValue,\n      _ref$name = _ref.name,\n      name = _ref$name === void 0 ? 'custom' : _ref$name,\n      onChange = _ref.onChange,\n      value = _ref.value;\n\n  var _useState = useState(value !== null && value !== void 0 ? value : defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      internalSetState = _useState2[1];\n\n  var controlled = useRef(null);\n\n  if (controlled.current === null) {\n    controlled.current = value !== undefined;\n  }\n\n  function setState(stateOrUpdater) {\n    var value = typeof stateOrUpdater === 'function' ? stateOrUpdater(state) : stateOrUpdater;\n\n    if (controlled.current === false) {\n      internalSetState(value);\n    }\n\n    if (onChange) {\n      onChange(value);\n    }\n  }\n\n  useEffect(function () {\n    var controlledValue = value !== undefined; // Uncontrolled -> Controlled\n    // If the component prop is uncontrolled, the prop value should be undefined\n\n    if (controlled.current === false && controlledValue) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'A component is changing an uncontrolled %s component to be controlled. ' + 'This is likely caused by the value changing to a defined value ' + 'from undefined. Decide between using a controlled or uncontrolled ' + 'value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components', name) : void 0;\n    } // Controlled -> Uncontrolled\n    // If the component prop is controlled, the prop value should be defined\n\n\n    if (controlled.current === true && !controlledValue) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'A component is changing a controlled %s component to be uncontrolled. ' + 'This is likely caused by the value changing to an undefined value ' + 'from a defined one. Decide between using a controlled or ' + 'uncontrolled value for the lifetime of the component. ' + 'More info: https://reactjs.org/link/controlled-components', name) : void 0;\n    }\n  }, [name, value]);\n\n  if (controlled.current === true) {\n    return [value, setState];\n  }\n\n  return [state, setState];\n}\n\nexport { useControllableState };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,IAAIC,cAAc,QAAQ,0CAA0C;AAC1F,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,cAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,oBAAoB,CAACC,IAAI,EAAE;EAClC,IAAIC,YAAY,GAAGD,IAAI,CAACC,YAAY;IAChCC,SAAS,GAAGF,IAAI,CAACG,IAAI;IACrBA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAC,GAAG,QAAQ,GAAGA,SAAS;IAClDE,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;IACxBC,KAAK,GAAGL,IAAI,CAACK,KAAK;EAEtB,IAAIC,SAAS,GAAGX,QAAQ,CAACU,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAGJ,YAAY,CAAC;IAC/EM,UAAU,GAAGb,cAAc,CAACY,SAAS,EAAE,CAAC,CAAC;IACzCE,KAAK,GAAGD,UAAU,CAAC,CAAC,CAAC;IACrBE,gBAAgB,GAAGF,UAAU,CAAC,CAAC,CAAC;EAEpC,IAAIG,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAE7B,IAAIc,UAAU,CAACC,OAAO,KAAK,IAAI,EAAE;IAC/BD,UAAU,CAACC,OAAO,GAAGN,KAAK,KAAKO,SAAS;EAC1C;EAEA,SAASC,QAAQ,CAACC,cAAc,EAAE;IAChC,IAAIT,KAAK,GAAG,OAAOS,cAAc,KAAK,UAAU,GAAGA,cAAc,CAACN,KAAK,CAAC,GAAGM,cAAc;IAEzF,IAAIJ,UAAU,CAACC,OAAO,KAAK,KAAK,EAAE;MAChCF,gBAAgB,CAACJ,KAAK,CAAC;IACzB;IAEA,IAAID,QAAQ,EAAE;MACZA,QAAQ,CAACC,KAAK,CAAC;IACjB;EACF;EAEAR,SAAS,CAAC,YAAY;IACpB,IAAIkB,eAAe,GAAGV,KAAK,KAAKO,SAAS,CAAC,CAAC;IAC3C;;IAEA,IAAIF,UAAU,CAACC,OAAO,KAAK,KAAK,IAAII,eAAe,EAAE;MACnDC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGpB,OAAO,CAAC,KAAK,EAAE,yEAAyE,GAAG,iEAAiE,GAAG,oEAAoE,GAAG,2CAA2C,GAAG,2DAA2D,EAAEK,IAAI,CAAC,GAAG,KAAK,CAAC;IACzY,CAAC,CAAC;IACF;;IAGA,IAAIO,UAAU,CAACC,OAAO,KAAK,IAAI,IAAI,CAACI,eAAe,EAAE;MACnDC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGpB,OAAO,CAAC,KAAK,EAAE,wEAAwE,GAAG,oEAAoE,GAAG,2DAA2D,GAAG,wDAAwD,GAAG,2DAA2D,EAAEK,IAAI,CAAC,GAAG,KAAK,CAAC;IAC/Y;EACF,CAAC,EAAE,CAACA,IAAI,EAAEE,KAAK,CAAC,CAAC;EAEjB,IAAIK,UAAU,CAACC,OAAO,KAAK,IAAI,EAAE;IAC/B,OAAO,CAACN,KAAK,EAAEQ,QAAQ,CAAC;EAC1B;EAEA,OAAO,CAACL,KAAK,EAAEK,QAAQ,CAAC;AAC1B;AAEA,SAASd,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}