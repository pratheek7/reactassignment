{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { initialSortState, getSortedState } from './sorting.js';\nimport normalize from '../tools/normalize.js';\n\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\n\nvar getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {\n  var _normalize = normalize(props.rows, props.headers, prevState),\n    rowIds = _normalize.rowIds,\n    rowsById = _normalize.rowsById,\n    cellsById = _normalize.cellsById;\n  var state = {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    var _getSortedState = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection),\n      _rowIds = _getSortedState.rowIds;\n    state.rowIds = _rowIds;\n  }\n  state.isExpandedAll = state.rowIds.every(function (id) {\n    return state.rowsById[id].isExpanded === true;\n  });\n  return state;\n};\nexport { getDerivedStateFromProps as default };","map":{"version":3,"names":["initialSortState","getSortedState","normalize","getDerivedStateFromProps","props","prevState","_normalize","rows","headers","rowIds","rowsById","cellsById","state","sortDirection","sortHeaderKey","initialRowOrder","slice","filterInputValue","shouldShowBatchActions","_getSortedState","_rowIds","isExpandedAll","every","id","isExpanded","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/DataTable/state/getDerivedStateFromProps.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { initialSortState, getSortedState } from './sorting.js';\nimport normalize from '../tools/normalize.js';\n\n/**\n * Helper to derive the next state from the given props and the\n * prevState. Potential future-facing API hook for React v17.\n *\n * Currently, it's being used as a way to normalize the incoming data that we\n * are receiving for rows\n */\n\nvar getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {\n  var _normalize = normalize(props.rows, props.headers, prevState),\n      rowIds = _normalize.rowIds,\n      rowsById = _normalize.rowsById,\n      cellsById = _normalize.cellsById;\n\n  var state = {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById,\n    sortDirection: prevState.sortDirection || initialSortState,\n    sortHeaderKey: prevState.sortHeaderKey || null,\n    // Copy over rowIds so the reference doesn't mutate the stored\n    // `initialRowOrder`\n    initialRowOrder: rowIds.slice(),\n    filterInputValue: prevState.filterInputValue || null,\n    // Optional state field to indicate whether a consumer should show a\n    // batch actions menu\n    shouldShowBatchActions: prevState.shouldShowBatchActions || false\n  };\n\n  if (prevState.sortDirection && prevState.sortHeaderKey) {\n    var _getSortedState = getSortedState(props, state, prevState.sortHeaderKey, prevState.sortDirection),\n        _rowIds = _getSortedState.rowIds;\n\n    state.rowIds = _rowIds;\n  }\n\n  state.isExpandedAll = state.rowIds.every(function (id) {\n    return state.rowsById[id].isExpanded === true;\n  });\n  return state;\n};\n\nexport { getDerivedStateFromProps as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB,EAAEC,cAAc,QAAQ,cAAc;AAC/D,OAAOC,SAAS,MAAM,uBAAuB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,wBAAwB,GAAG,SAASA,wBAAwB,CAACC,KAAK,EAAEC,SAAS,EAAE;EACjF,IAAIC,UAAU,GAAGJ,SAAS,CAACE,KAAK,CAACG,IAAI,EAAEH,KAAK,CAACI,OAAO,EAAEH,SAAS,CAAC;IAC5DI,MAAM,GAAGH,UAAU,CAACG,MAAM;IAC1BC,QAAQ,GAAGJ,UAAU,CAACI,QAAQ;IAC9BC,SAAS,GAAGL,UAAU,CAACK,SAAS;EAEpC,IAAIC,KAAK,GAAG;IACVH,MAAM,EAAEA,MAAM;IACdC,QAAQ,EAAEA,QAAQ;IAClBC,SAAS,EAAEA,SAAS;IACpBE,aAAa,EAAER,SAAS,CAACQ,aAAa,IAAIb,gBAAgB;IAC1Dc,aAAa,EAAET,SAAS,CAACS,aAAa,IAAI,IAAI;IAC9C;IACA;IACAC,eAAe,EAAEN,MAAM,CAACO,KAAK,EAAE;IAC/BC,gBAAgB,EAAEZ,SAAS,CAACY,gBAAgB,IAAI,IAAI;IACpD;IACA;IACAC,sBAAsB,EAAEb,SAAS,CAACa,sBAAsB,IAAI;EAC9D,CAAC;EAED,IAAIb,SAAS,CAACQ,aAAa,IAAIR,SAAS,CAACS,aAAa,EAAE;IACtD,IAAIK,eAAe,GAAGlB,cAAc,CAACG,KAAK,EAAEQ,KAAK,EAAEP,SAAS,CAACS,aAAa,EAAET,SAAS,CAACQ,aAAa,CAAC;MAChGO,OAAO,GAAGD,eAAe,CAACV,MAAM;IAEpCG,KAAK,CAACH,MAAM,GAAGW,OAAO;EACxB;EAEAR,KAAK,CAACS,aAAa,GAAGT,KAAK,CAACH,MAAM,CAACa,KAAK,CAAC,UAAUC,EAAE,EAAE;IACrD,OAAOX,KAAK,CAACF,QAAQ,CAACa,EAAE,CAAC,CAACC,UAAU,KAAK,IAAI;EAC/C,CAAC,CAAC;EACF,OAAOZ,KAAK;AACd,CAAC;AAED,SAAST,wBAAwB,IAAIsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}