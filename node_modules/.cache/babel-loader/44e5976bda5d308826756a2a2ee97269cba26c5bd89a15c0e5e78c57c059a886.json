{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDragDropManager } from './useDragDropManager.mjs';\nimport { useCollector } from './useCollector.mjs';\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\nexport function useDragLayer(collect) {\n  const dragDropManager = useDragDropManager();\n  const monitor = dragDropManager.getMonitor();\n  const [collected, updateCollected] = useCollector(monitor, collect);\n  useEffect(() => monitor.subscribeToOffsetChange(updateCollected));\n  useEffect(() => monitor.subscribeToStateChange(updateCollected));\n  return collected;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,kBAAkB,QAAQ,0BAAyB;AAC5D,SAASC,YAAY,QAAQ,oBAAmB;AAEhD;;;;AAIA,OAAO,SAASC,YAAY,CAC3BC,OAAkE,EACjD;EACjB,MAAMC,eAAe,GAAGJ,kBAAkB,EAAE;EAC5C,MAAMK,OAAO,GAAGD,eAAe,CAACE,UAAU,EAAE;EAC5C,MAAM,CAACC,SAAS,EAAEC,eAAe,CAAC,GAAGP,YAAY,CAACI,OAAO,EAAEF,OAAO,CAAC;EAEnEJ,SAAS,CAAC,MAAMM,OAAO,CAACI,uBAAuB,CAACD,eAAe,CAAC,CAAC;EACjET,SAAS,CAAC,MAAMM,OAAO,CAACK,sBAAsB,CAACF,eAAe,CAAC,CAAC;EAChE,OAAOD,SAAS","names":["useEffect","useDragDropManager","useCollector","useDragLayer","collect","dragDropManager","monitor","getMonitor","collected","updateCollected","subscribeToOffsetChange","subscribeToStateChange"],"sources":["C:\\Users\\Administrator\\Desktop\\nerf\\node_modules\\react-dnd\\src\\hooks\\useDragLayer.ts"],"sourcesContent":["import { useEffect } from 'react'\nimport type { DragLayerMonitor } from '../types/index.js'\nimport { useDragDropManager } from './useDragDropManager.js'\nimport { useCollector } from './useCollector.js'\n\n/**\n * useDragLayer Hook\n * @param collector The property collector\n */\nexport function useDragLayer<CollectedProps, DragObject = any>(\n\tcollect: (monitor: DragLayerMonitor<DragObject>) => CollectedProps,\n): CollectedProps {\n\tconst dragDropManager = useDragDropManager()\n\tconst monitor = dragDropManager.getMonitor()\n\tconst [collected, updateCollected] = useCollector(monitor, collect)\n\n\tuseEffect(() => monitor.subscribeToOffsetChange(updateCollected))\n\tuseEffect(() => monitor.subscribeToStateChange(updateCollected))\n\treturn collected\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}