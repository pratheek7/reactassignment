{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\nerf\\\\src\\\\components\\\\pages\\\\Components.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { SelectableTile, Button } from '@carbon/react';\nimport { updateComponents } from '../../actions/components';\nimport '../../App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Components extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.updateComponentList = component => {\n      if (this.props.selectedComponents.includes(component)) {\n        let filteredArray = this.props.selectedComponents.filter(item => item !== component);\n        this.props.updateComponents(filteredArray);\n      } else {\n        this.props.updateComponents([...this.props.selectedComponents, component]);\n      }\n    };\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"components-container\",\n        children: [\"Select the parts to assemble\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"components-tiles\",\n          role: \"group\",\n          \"aria-label\": \"selectable tiles\",\n          children: this.props.components.map((tile, index) => /*#__PURE__*/_jsxDEV(SelectableTile, {\n            id: \"selectable-tile-\" + index,\n            name: \"tiles\",\n            onClick: () => this.updateComponentList(tile.id),\n            children: [tile.title, /*#__PURE__*/_jsxDEV(\"img\", {\n              src: tile.img,\n              alt: tile.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"components-btn\",\n          onClick: () => this.props.history.push('/assemble'),\n          children: \"Assemble\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    components: state.components.completeSet,\n    selectedComponents: state.components.data\n  };\n};\nconst mapDispatchToProps = {\n  updateComponents\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Components);","map":{"version":3,"names":["React","connect","SelectableTile","Button","updateComponents","Components","PureComponent","updateComponentList","component","props","selectedComponents","includes","filteredArray","filter","item","render","components","map","tile","index","id","title","img","history","push","mapStateToProps","state","completeSet","data","mapDispatchToProps"],"sources":["C:/Users/Administrator/Desktop/nerf/src/components/pages/Components.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { SelectableTile, Button } from '@carbon/react';\nimport { updateComponents } from '../../actions/components';\nimport '../../App.scss';\n\nclass Components extends React.PureComponent {\n  updateComponentList = (component) => {\n    if (this.props.selectedComponents.includes(component)) {\n      let filteredArray = this.props.selectedComponents.filter(item => item !== component)\n      this.props.updateComponents(filteredArray);\n    } else {\n      this.props.updateComponents([...this.props.selectedComponents, component]);\n    }\n  }\n\n  render = () => {\n    return (\n      <div className='components-container'>\n        Select the parts to assemble\n          <div className='components-tiles' role=\"group\" aria-label=\"selectable tiles\">\n            {\n              this.props.components.map((tile, index) => (\n                <SelectableTile id={\"selectable-tile-\" + index} name=\"tiles\" onClick={() => this.updateComponentList(tile.id)}>\n                  {tile.title}\n                  <img src={tile.img} alt={tile.title} />\n                </SelectableTile>\n              ))\n            }\n          </div>\n          <Button className='components-btn' onClick={() => this.props.history.push('/assemble')}>Assemble</Button>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    components: state.components.completeSet,\n    selectedComponents: state.components.data,\n  };\n};\n\nconst mapDispatchToProps = {\n  updateComponents,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Components);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,cAAc,EAAEC,MAAM,QAAQ,eAAe;AACtD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,OAAO,gBAAgB;AAAC;AAExB,MAAMC,UAAU,SAASL,KAAK,CAACM,aAAa,CAAC;EAAA;IAAA;IAAA,KAC3CC,mBAAmB,GAAIC,SAAS,IAAK;MACnC,IAAI,IAAI,CAACC,KAAK,CAACC,kBAAkB,CAACC,QAAQ,CAACH,SAAS,CAAC,EAAE;QACrD,IAAII,aAAa,GAAG,IAAI,CAACH,KAAK,CAACC,kBAAkB,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAKN,SAAS,CAAC;QACpF,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAACQ,aAAa,CAAC;MAC5C,CAAC,MAAM;QACL,IAAI,CAACH,KAAK,CAACL,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAACK,KAAK,CAACC,kBAAkB,EAAEF,SAAS,CAAC,CAAC;MAC5E;IACF,CAAC;IAAA,KAEDO,MAAM,GAAG,MAAM;MACb,oBACE;QAAK,SAAS,EAAC,sBAAsB;QAAA,WAAC,8BAElC;UAAK,SAAS,EAAC,kBAAkB;UAAC,IAAI,EAAC,OAAO;UAAC,cAAW,kBAAkB;UAAA,UAExE,IAAI,CAACN,KAAK,CAACO,UAAU,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpC,QAAC,cAAc;YAAC,EAAE,EAAE,kBAAkB,GAAGA,KAAM;YAAC,IAAI,EAAC,OAAO;YAAC,OAAO,EAAE,MAAM,IAAI,CAACZ,mBAAmB,CAACW,IAAI,CAACE,EAAE,CAAE;YAAA,WAC3GF,IAAI,CAACG,KAAK,eACX;cAAK,GAAG,EAAEH,IAAI,CAACI,GAAI;cAAC,GAAG,EAAEJ,IAAI,CAACG;YAAM;cAAA;cAAA;cAAA;YAAA,QAAG;UAAA;YAAA;YAAA;YAAA;UAAA,QAE1C;QAAC;UAAA;UAAA;UAAA;QAAA,QAEA,eACN,QAAC,MAAM;UAAC,SAAS,EAAC,gBAAgB;UAAC,OAAO,EAAE,MAAM,IAAI,CAACZ,KAAK,CAACc,OAAO,CAACC,IAAI,CAAC,WAAW,CAAE;UAAA,UAAC;QAAQ;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACvG;IAEV,CAAC;EAAA;AACH;AAEA,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACjC,OAAO;IACLV,UAAU,EAAEU,KAAK,CAACV,UAAU,CAACW,WAAW;IACxCjB,kBAAkB,EAAEgB,KAAK,CAACV,UAAU,CAACY;EACvC,CAAC;AACH,CAAC;AAED,MAAMC,kBAAkB,GAAG;EACzBzB;AACF,CAAC;AAED,eAAeH,OAAO,CAACwB,eAAe,EAAEI,kBAAkB,CAAC,CAACxB,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}