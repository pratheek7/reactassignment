{"ast":null,"code":"import { DragDropManagerImpl } from './classes/DragDropManagerImpl.mjs';\nimport { createStore } from 'redux';\nimport { reduce } from './reducers/index.mjs';\nimport { DragDropMonitorImpl } from './classes/DragDropMonitorImpl.mjs';\nimport { HandlerRegistryImpl } from './classes/HandlerRegistryImpl.mjs';\nexport function createDragDropManager(backendFactory) {\n  let globalContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let backendOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let debugMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const store = makeStoreInstance(debugMode);\n  const monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store));\n  const manager = new DragDropManagerImpl(store, monitor);\n  const backend = backendFactory(manager, globalContext, backendOptions);\n  manager.receiveBackend(backend);\n  return manager;\n}\nfunction makeStoreInstance(debugMode) {\n  // TODO: if we ever make a react-native version of this,\n  // we'll need to consider how to pull off dev-tooling\n  const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;\n  return createStore(reduce, debugMode && reduxDevTools && reduxDevTools({\n    name: 'dnd-core',\n    instanceId: 'dnd-core'\n  }));\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mCAAkC;AAEtE,SAASC,WAAW,QAAe,OAAO;AAC1C,SAASC,MAAM,QAAe,sBAAqB;AACnD,SAASC,mBAAmB,QAAQ,mCAAkC;AACtE,SAASC,mBAAmB,QAAQ,mCAAkC;AAEtE,OAAO,SAASC,qBAAqB,CACpCC,cAA8B,EAIZ;EAAA,IAHlBC,aAAsB,uEAAGC,SAAS;EAAA,IAClCC,cAAuB,uEAAG,EAAE;EAAA,IAC5BC,SAAS,uEAAG,KAAK;EAEjB,MAAMC,KAAK,GAAGC,iBAAiB,CAACF,SAAS,CAAC;EAC1C,MAAMG,OAAO,GAAG,IAAIV,mBAAmB,CAACQ,KAAK,EAAE,IAAIP,mBAAmB,CAACO,KAAK,CAAC,CAAC;EAC9E,MAAMG,OAAO,GAAG,IAAId,mBAAmB,CAACW,KAAK,EAAEE,OAAO,CAAC;EACvD,MAAME,OAAO,GAAGT,cAAc,CAACQ,OAAO,EAAEP,aAAa,EAAEE,cAAc,CAAC;EACtEK,OAAO,CAACE,cAAc,CAACD,OAAO,CAAC;EAC/B,OAAOD,OAAO;;AAGf,SAASF,iBAAiB,CAACF,SAAkB,EAAgB;EAC5D;EACA;EACA,MAAMO,aAAa,GAClB,OAAOC,MAAM,KAAK,WAAW,IAC7BA,MAAO,CAASC,4BAA4B;EAC7C,OAAOlB,WAAW,CACjBC,MAAM,EACNQ,SAAS,IACRO,aAAa,IACbA,aAAa,CAAC;IACbG,IAAI,EAAE,UAAU;IAChBC,UAAU,EAAE;GACZ,CAAC,CACH","names":["DragDropManagerImpl","createStore","reduce","DragDropMonitorImpl","HandlerRegistryImpl","createDragDropManager","backendFactory","globalContext","undefined","backendOptions","debugMode","store","makeStoreInstance","monitor","manager","backend","receiveBackend","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","name","instanceId"],"sources":["C:\\Users\\Administrator\\Desktop\\nerf\\node_modules\\dnd-core\\src\\createDragDropManager.ts"],"sourcesContent":["import { DragDropManagerImpl } from './classes/DragDropManagerImpl.js'\nimport type { DragDropManager, BackendFactory } from './interfaces.js'\nimport { createStore, Store } from 'redux'\nimport { reduce, State } from './reducers/index.js'\nimport { DragDropMonitorImpl } from './classes/DragDropMonitorImpl.js'\nimport { HandlerRegistryImpl } from './classes/HandlerRegistryImpl.js'\n\nexport function createDragDropManager(\n\tbackendFactory: BackendFactory,\n\tglobalContext: unknown = undefined,\n\tbackendOptions: unknown = {},\n\tdebugMode = false,\n): DragDropManager {\n\tconst store = makeStoreInstance(debugMode)\n\tconst monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store))\n\tconst manager = new DragDropManagerImpl(store, monitor)\n\tconst backend = backendFactory(manager, globalContext, backendOptions)\n\tmanager.receiveBackend(backend)\n\treturn manager\n}\n\nfunction makeStoreInstance(debugMode: boolean): Store<State> {\n\t// TODO: if we ever make a react-native version of this,\n\t// we'll need to consider how to pull off dev-tooling\n\tconst reduxDevTools =\n\t\ttypeof window !== 'undefined' &&\n\t\t(window as any).__REDUX_DEVTOOLS_EXTENSION__\n\treturn createStore(\n\t\treduce,\n\t\tdebugMode &&\n\t\t\treduxDevTools &&\n\t\t\treduxDevTools({\n\t\t\t\tname: 'dnd-core',\n\t\t\t\tinstanceId: 'dnd-core',\n\t\t\t}),\n\t)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}