{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getCellId } from './cells.js';\n\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<object>} rows\n * @param {Array<object>} headers\n * @returns {object}\n */\n\nvar normalize = function normalize(rows, headers) {\n  var prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prevRowsByIds = prevState.rowsById;\n  var rowIds = new Array(rows.length);\n  var rowsById = {};\n  var cellsById = {};\n  rows.forEach(function (row, i) {\n    rowIds[i] = row.id; // Initialize the row info and state values, namely for selection and\n    // expansion\n\n    var id = row.id,\n      _row$isSelected = row.isSelected,\n      isSelected = _row$isSelected === void 0 ? false : _row$isSelected,\n      _row$isExpanded = row.isExpanded,\n      isExpanded = _row$isExpanded === void 0 ? false : _row$isExpanded,\n      _row$disabled = row.disabled,\n      disabled = _row$disabled === void 0 ? false : _row$disabled;\n    rowsById[id] = {\n      id: id,\n      isSelected: isSelected,\n      isExpanded: isExpanded,\n      disabled: disabled,\n      cells: new Array(headers.length)\n    }; // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n    headers.forEach(function (_ref, i) {\n      var key = _ref.key;\n      var id = getCellId(row.id, key); // Initialize the cell info and state values, namely for editing\n\n      cellsById[id] = {\n        id: id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      }; // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById\n  };\n};\nexport { normalize as default };","map":{"version":3,"names":["getCellId","normalize","rows","headers","prevState","arguments","length","undefined","prevRowsByIds","rowsById","rowIds","Array","cellsById","forEach","row","i","id","_row$isSelected","isSelected","_row$isExpanded","isExpanded","_row$disabled","disabled","cells","_ref","key","value","isEditable","isEditing","isValid","errors","info","header","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/DataTable/tools/normalize.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getCellId } from './cells.js';\n\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<object>} rows\n * @param {Array<object>} headers\n * @returns {object}\n */\n\nvar normalize = function normalize(rows, headers) {\n  var prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prevRowsByIds = prevState.rowsById;\n  var rowIds = new Array(rows.length);\n  var rowsById = {};\n  var cellsById = {};\n  rows.forEach(function (row, i) {\n    rowIds[i] = row.id; // Initialize the row info and state values, namely for selection and\n    // expansion\n\n    var id = row.id,\n        _row$isSelected = row.isSelected,\n        isSelected = _row$isSelected === void 0 ? false : _row$isSelected,\n        _row$isExpanded = row.isExpanded,\n        isExpanded = _row$isExpanded === void 0 ? false : _row$isExpanded,\n        _row$disabled = row.disabled,\n        disabled = _row$disabled === void 0 ? false : _row$disabled;\n    rowsById[id] = {\n      id: id,\n      isSelected: isSelected,\n      isExpanded: isExpanded,\n      disabled: disabled,\n      cells: new Array(headers.length)\n    }; // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n\n    headers.forEach(function (_ref, i) {\n      var key = _ref.key;\n      var id = getCellId(row.id, key); // Initialize the cell info and state values, namely for editing\n\n      cellsById[id] = {\n        id: id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      }; // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById\n  };\n};\n\nexport { normalize as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,QAAQ,YAAY;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,SAASA,SAAS,CAACC,IAAI,EAAEC,OAAO,EAAE;EAChD,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACtF,IAAIG,aAAa,GAAGJ,SAAS,CAACK,QAAQ;EACtC,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACT,IAAI,CAACI,MAAM,CAAC;EACnC,IAAIG,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIG,SAAS,GAAG,CAAC,CAAC;EAClBV,IAAI,CAACW,OAAO,CAAC,UAAUC,GAAG,EAAEC,CAAC,EAAE;IAC7BL,MAAM,CAACK,CAAC,CAAC,GAAGD,GAAG,CAACE,EAAE,CAAC,CAAC;IACpB;;IAEA,IAAIA,EAAE,GAAGF,GAAG,CAACE,EAAE;MACXC,eAAe,GAAGH,GAAG,CAACI,UAAU;MAChCA,UAAU,GAAGD,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,eAAe;MACjEE,eAAe,GAAGL,GAAG,CAACM,UAAU;MAChCA,UAAU,GAAGD,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,eAAe;MACjEE,aAAa,GAAGP,GAAG,CAACQ,QAAQ;MAC5BA,QAAQ,GAAGD,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,aAAa;IAC/DZ,QAAQ,CAACO,EAAE,CAAC,GAAG;MACbA,EAAE,EAAEA,EAAE;MACNE,UAAU,EAAEA,UAAU;MACtBE,UAAU,EAAEA,UAAU;MACtBE,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAE,IAAIZ,KAAK,CAACR,OAAO,CAACG,MAAM;IACjC,CAAC,CAAC,CAAC;IACH;;IAEA,IAAIE,aAAa,IAAIA,aAAa,CAACM,GAAG,CAACE,EAAE,CAAC,KAAKT,SAAS,EAAE;MACxDE,QAAQ,CAACK,GAAG,CAACE,EAAE,CAAC,CAACE,UAAU,GAAGV,aAAa,CAACM,GAAG,CAACE,EAAE,CAAC,CAACE,UAAU;MAC9DT,QAAQ,CAACK,GAAG,CAACE,EAAE,CAAC,CAACI,UAAU,GAAGZ,aAAa,CAACM,GAAG,CAACE,EAAE,CAAC,CAACI,UAAU;IAChE;IAEAjB,OAAO,CAACU,OAAO,CAAC,UAAUW,IAAI,EAAET,CAAC,EAAE;MACjC,IAAIU,GAAG,GAAGD,IAAI,CAACC,GAAG;MAClB,IAAIT,EAAE,GAAGhB,SAAS,CAACc,GAAG,CAACE,EAAE,EAAES,GAAG,CAAC,CAAC,CAAC;;MAEjCb,SAAS,CAACI,EAAE,CAAC,GAAG;QACdA,EAAE,EAAEA,EAAE;QACNU,KAAK,EAAEZ,GAAG,CAACW,GAAG,CAAC;QACfE,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;UACJC,MAAM,EAAEP;QACV;MACF,CAAC,CAAC,CAAC;MACH;;MAEAhB,QAAQ,CAACK,GAAG,CAACE,EAAE,CAAC,CAACO,KAAK,CAACR,CAAC,CAAC,GAAGC,EAAE;IAChC,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO;IACLN,MAAM,EAAEA,MAAM;IACdD,QAAQ,EAAEA,QAAQ;IAClBG,SAAS,EAAEA;EACb,CAAC;AACH,CAAC;AAED,SAASX,SAAS,IAAIgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}