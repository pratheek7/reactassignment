{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { slicedToArray as _slicedToArray } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkmark } from '@carbon/icons-react';\nimport MenuOption from './MenuOption.js';\nfunction MenuRadioGroupOptions(_ref) {\n  var items = _ref.items,\n    initialSelectedItem = _ref.initialSelectedItem,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n  var _useState = useState(initialSelectedItem),\n    _useState2 = _slicedToArray(_useState, 2),\n    selected = _useState2[0],\n    setSelected = _useState2[1];\n  function handleClick(option) {\n    setSelected(option);\n    onChange(option);\n  }\n  var options = items.map(function (option, i) {\n    var isSelected = selected === option;\n    return /*#__PURE__*/React__default.createElement(MenuOption, {\n      key: i,\n      role: \"menuitemradio\",\n      \"aria-checked\": isSelected,\n      renderIcon: isSelected ? Checkmark : null,\n      label: option,\n      indented: true,\n      onClick: function onClick() {\n        handleClick(option);\n      }\n    });\n  });\n  return options;\n}\nMenuRadioGroupOptions.propTypes = {\n  /**\n   * Whether the option should be checked by default\n   */\n  initialSelectedItem: PropTypes.string,\n  /**\n   * Array of the radio options\n   */\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  /**\n   * Callback function when selection the has been changed\n   */\n  onChange: PropTypes.func\n};\nexport { MenuRadioGroupOptions as default };","map":{"version":3,"names":["slicedToArray","_slicedToArray","React__default","useState","PropTypes","Checkmark","MenuOption","MenuRadioGroupOptions","_ref","items","initialSelectedItem","_ref$onChange","onChange","_useState","_useState2","selected","setSelected","handleClick","option","options","map","i","isSelected","createElement","key","role","renderIcon","label","indented","onClick","propTypes","string","arrayOf","isRequired","func","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/Menu/MenuRadioGroupOptions.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { slicedToArray as _slicedToArray } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React__default, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkmark } from '@carbon/icons-react';\nimport MenuOption from './MenuOption.js';\n\nfunction MenuRadioGroupOptions(_ref) {\n  var items = _ref.items,\n      initialSelectedItem = _ref.initialSelectedItem,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange;\n\n  var _useState = useState(initialSelectedItem),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  function handleClick(option) {\n    setSelected(option);\n    onChange(option);\n  }\n\n  var options = items.map(function (option, i) {\n    var isSelected = selected === option;\n    return /*#__PURE__*/React__default.createElement(MenuOption, {\n      key: i,\n      role: \"menuitemradio\",\n      \"aria-checked\": isSelected,\n      renderIcon: isSelected ? Checkmark : null,\n      label: option,\n      indented: true,\n      onClick: function onClick() {\n        handleClick(option);\n      }\n    });\n  });\n  return options;\n}\n\nMenuRadioGroupOptions.propTypes = {\n  /**\n   * Whether the option should be checked by default\n   */\n  initialSelectedItem: PropTypes.string,\n\n  /**\n   * Array of the radio options\n   */\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n  /**\n   * Callback function when selection the has been changed\n   */\n  onChange: PropTypes.func\n};\n\nexport { MenuRadioGroupOptions as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,IAAIC,cAAc,QAAQ,6CAA6C;AAC7F,OAAOC,cAAc,IAAIC,QAAQ,QAAQ,OAAO;AAChD,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,OAAOC,UAAU,MAAM,iBAAiB;AAExC,SAASC,qBAAqB,CAACC,IAAI,EAAE;EACnC,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,mBAAmB,GAAGF,IAAI,CAACE,mBAAmB;IAC9CC,aAAa,GAAGH,IAAI,CAACI,QAAQ;IAC7BA,QAAQ,GAAGD,aAAa,KAAK,KAAK,CAAC,GAAG,YAAY,CAAC,CAAC,GAAGA,aAAa;EAExE,IAAIE,SAAS,GAAGV,QAAQ,CAACO,mBAAmB,CAAC;IACzCI,UAAU,GAAGb,cAAc,CAACY,SAAS,EAAE,CAAC,CAAC;IACzCE,QAAQ,GAAGD,UAAU,CAAC,CAAC,CAAC;IACxBE,WAAW,GAAGF,UAAU,CAAC,CAAC,CAAC;EAE/B,SAASG,WAAW,CAACC,MAAM,EAAE;IAC3BF,WAAW,CAACE,MAAM,CAAC;IACnBN,QAAQ,CAACM,MAAM,CAAC;EAClB;EAEA,IAAIC,OAAO,GAAGV,KAAK,CAACW,GAAG,CAAC,UAAUF,MAAM,EAAEG,CAAC,EAAE;IAC3C,IAAIC,UAAU,GAAGP,QAAQ,KAAKG,MAAM;IACpC,OAAO,aAAahB,cAAc,CAACqB,aAAa,CAACjB,UAAU,EAAE;MAC3DkB,GAAG,EAAEH,CAAC;MACNI,IAAI,EAAE,eAAe;MACrB,cAAc,EAAEH,UAAU;MAC1BI,UAAU,EAAEJ,UAAU,GAAGjB,SAAS,GAAG,IAAI;MACzCsB,KAAK,EAAET,MAAM;MACbU,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE,SAASA,OAAO,GAAG;QAC1BZ,WAAW,CAACC,MAAM,CAAC;MACrB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOC,OAAO;AAChB;AAEAZ,qBAAqB,CAACuB,SAAS,GAAG;EAChC;AACF;AACA;EACEpB,mBAAmB,EAAEN,SAAS,CAAC2B,MAAM;EAErC;AACF;AACA;EACEtB,KAAK,EAAEL,SAAS,CAAC4B,OAAO,CAAC5B,SAAS,CAAC2B,MAAM,CAAC,CAACE,UAAU;EAErD;AACF;AACA;EACErB,QAAQ,EAAER,SAAS,CAAC8B;AACtB,CAAC;AAED,SAAS3B,qBAAqB,IAAI4B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}