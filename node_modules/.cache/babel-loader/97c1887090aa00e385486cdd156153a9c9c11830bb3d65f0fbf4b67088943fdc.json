{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectSpread2 as _objectSpread2 } from '../../../_virtual/_rollupPluginBabelHelpers.js';\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Counterpart to `normalize` for a collection of rows. This method unravels the\n * normalization step that we use to build the given parameters in order to\n * return a natural interface to working with rows for a consumer.\n *\n * The default heuristic here is to map through all the row ids and return the\n * value of the row for the given id, in addition to adding a `cells` key that\n * contains the results of mapping over the rows cells and getting individual\n * cell info.\n *\n * @param {Array<string>} rowIds array of row ids in the table\n * @param {object} rowsById object containing lookups for rows by id\n * @param {object} cellsById object containing lookups for cells by id\n */\nvar denormalize = function denormalize(rowIds, rowsById, cellsById) {\n  return rowIds.map(function (id) {\n    return _objectSpread2(_objectSpread2({}, rowsById[id]), {}, {\n      cells: rowsById[id].cells.map(function (cellId) {\n        return cellsById[cellId];\n      })\n    });\n  });\n};\nexport { denormalize as default };","map":{"version":3,"names":["objectSpread2","_objectSpread2","denormalize","rowIds","rowsById","cellsById","map","id","cells","cellId","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/DataTable/tools/denormalize.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectSpread2 as _objectSpread2 } from '../../../_virtual/_rollupPluginBabelHelpers.js';\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Counterpart to `normalize` for a collection of rows. This method unravels the\n * normalization step that we use to build the given parameters in order to\n * return a natural interface to working with rows for a consumer.\n *\n * The default heuristic here is to map through all the row ids and return the\n * value of the row for the given id, in addition to adding a `cells` key that\n * contains the results of mapping over the rows cells and getting individual\n * cell info.\n *\n * @param {Array<string>} rowIds array of row ids in the table\n * @param {object} rowsById object containing lookups for rows by id\n * @param {object} cellsById object containing lookups for cells by id\n */\nvar denormalize = function denormalize(rowIds, rowsById, cellsById) {\n  return rowIds.map(function (id) {\n    return _objectSpread2(_objectSpread2({}, rowsById[id]), {}, {\n      cells: rowsById[id].cells.map(function (cellId) {\n        return cellsById[cellId];\n      })\n    });\n  });\n};\n\nexport { denormalize as default };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAa,IAAIC,cAAc,QAAQ,gDAAgD;;AAEhG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,SAASA,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAE;EAClE,OAAOF,MAAM,CAACG,GAAG,CAAC,UAAUC,EAAE,EAAE;IAC9B,OAAON,cAAc,CAACA,cAAc,CAAC,CAAC,CAAC,EAAEG,QAAQ,CAACG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAC1DC,KAAK,EAAEJ,QAAQ,CAACG,EAAE,CAAC,CAACC,KAAK,CAACF,GAAG,CAAC,UAAUG,MAAM,EAAE;QAC9C,OAAOJ,SAAS,CAACI,MAAM,CAAC;MAC1B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,SAASP,WAAW,IAAIQ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}