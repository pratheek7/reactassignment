{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectWithoutProperties as _objectWithoutProperties, extends as _extends, defineProperty as _defineProperty, typeof as _typeof } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport * as FeatureFlags from '@carbon/feature-flags';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useGridSettings } from './GridContext.js';\nvar _excluded = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"],\n  _excluded2 = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\", \"span\"];\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n    BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n    children = _ref.children,\n    customClassName = _ref.className,\n    sm = _ref.sm,\n    md = _ref.md,\n    lg = _ref.lg,\n    xlg = _ref.xlg,\n    max = _ref.max,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useGridSettings = useGridSettings(),\n    mode = _useGridSettings.mode;\n  var prefix = usePrefix();\n  if (mode === 'css-grid') {\n    return /*#__PURE__*/React__default.createElement(CSSGridColumn, _extends({\n      as: BaseComponent,\n      className: customClassName,\n      sm: sm,\n      md: md,\n      lg: lg,\n      xlg: xlg,\n      max: max\n    }, rest), children);\n  }\n  var columnClassName = getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);\n  var className = cx(customClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React__default.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\nvar percentSpanType = PropTypes.oneOf(['25%', '50%', '75%', '100%']);\nvar spanPropType = FeatureFlags.enabled('enable-css-grid') ? PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n  offset: PropTypes.number,\n  start: PropTypes.number,\n  end: PropTypes.number\n}), percentSpanType]) : PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nfunction CSSGridColumn(_ref2) {\n  var _ref2$as = _ref2.as,\n    BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,\n    children = _ref2.children,\n    containerClassName = _ref2.className,\n    sm = _ref2.sm,\n    md = _ref2.md,\n    lg = _ref2.lg,\n    xlg = _ref2.xlg,\n    max = _ref2.max,\n    span = _ref2.span,\n    rest = _objectWithoutProperties(_ref2, _excluded2);\n  var prefix = usePrefix();\n  var breakpointClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix);\n  var spanClassName = getClassNameForSpan(span, prefix);\n  var className = cx(containerClassName, breakpointClassName, spanClassName, _defineProperty({}, \"\".concat(prefix, \"--css-grid-column\"), true));\n  return /*#__PURE__*/React__default.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\nCSSGridColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n  /**\n   * Specify constant column span, start,  or end values that will not change\n   * based on breakpoint\n   */\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType, PropTypes.shape({\n    span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n    start: PropTypes.number,\n    end: PropTypes.number\n  })]),\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a string, the user has specified a percent\n    // they'd like this column to span.\n\n    if (typeof breakpoint === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint.slice(0, -1)));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n    var span = breakpoint.span,\n      offset = breakpoint.offset,\n      start = breakpoint.start,\n      end = breakpoint.end;\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n    if (typeof start === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(start));\n    }\n    if (typeof end === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-end-\").concat(end));\n    }\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n    } else if (typeof span === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span.slice(0, -1)));\n      continue;\n    }\n  }\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n    var span = breakpoint.span,\n      offset = breakpoint.offset;\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for a span value\n */\n\nfunction getClassNameForSpan(value, prefix) {\n  var classNames = [];\n  if (typeof value === 'number' || typeof value === 'string') {\n    classNames.push(\"\".concat(prefix, \"--col-span-\").concat(value));\n  } else if (_typeof(value) === 'object') {\n    var span = value.span,\n      start = value.start,\n      end = value.end;\n    if (span !== undefined && span !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-span-\").concat(span));\n    }\n    if (start !== undefined && start !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-start-\").concat(start));\n    }\n    if (end !== undefined && end !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-end-\").concat(end));\n    }\n  }\n  return classNames.join('');\n}\nexport { Column as default };","map":{"version":3,"names":["objectWithoutProperties","_objectWithoutProperties","extends","_extends","defineProperty","_defineProperty","typeof","_typeof","FeatureFlags","cx","PropTypes","React__default","usePrefix","useGridSettings","_excluded","_excluded2","Column","_ref","_ref$as","as","BaseComponent","children","customClassName","className","sm","md","lg","xlg","max","rest","_useGridSettings","mode","prefix","createElement","CSSGridColumn","columnClassName","getClassNameForFlexGridBreakpoints","concat","length","percentSpanType","oneOf","spanPropType","enabled","oneOfType","bool","number","shape","span","offset","start","end","propTypes","string","elementType","node","_ref2","_ref2$as","containerClassName","breakpointClassName","getClassNameForBreakpoints","spanClassName","getClassNameForSpan","breakpointNames","breakpoints","classNames","i","breakpoint","undefined","name","push","slice","join","value","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/Grid/Column.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectWithoutProperties as _objectWithoutProperties, extends as _extends, defineProperty as _defineProperty, typeof as _typeof } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport * as FeatureFlags from '@carbon/feature-flags';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { useGridSettings } from './GridContext.js';\n\nvar _excluded = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\"],\n    _excluded2 = [\"as\", \"children\", \"className\", \"sm\", \"md\", \"lg\", \"xlg\", \"max\", \"span\"];\n\nfunction Column(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,\n      children = _ref.children,\n      customClassName = _ref.className,\n      sm = _ref.sm,\n      md = _ref.md,\n      lg = _ref.lg,\n      xlg = _ref.xlg,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useGridSettings = useGridSettings(),\n      mode = _useGridSettings.mode;\n\n  var prefix = usePrefix();\n\n  if (mode === 'css-grid') {\n    return /*#__PURE__*/React__default.createElement(CSSGridColumn, _extends({\n      as: BaseComponent,\n      className: customClassName,\n      sm: sm,\n      md: md,\n      lg: lg,\n      xlg: xlg,\n      max: max\n    }, rest), children);\n  }\n\n  var columnClassName = getClassNameForFlexGridBreakpoints([sm, md, lg, xlg, max], prefix);\n  var className = cx(customClassName, columnClassName, _defineProperty({}, \"\".concat(prefix, \"--col\"), columnClassName.length === 0));\n  return /*#__PURE__*/React__default.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nvar percentSpanType = PropTypes.oneOf(['25%', '50%', '75%', '100%']);\nvar spanPropType = FeatureFlags.enabled('enable-css-grid') ? PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n  offset: PropTypes.number,\n  start: PropTypes.number,\n  end: PropTypes.number\n}), percentSpanType]) : PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.shape({\n  span: PropTypes.number,\n  offset: PropTypes.number\n})]);\nColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\n\nfunction CSSGridColumn(_ref2) {\n  var _ref2$as = _ref2.as,\n      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,\n      children = _ref2.children,\n      containerClassName = _ref2.className,\n      sm = _ref2.sm,\n      md = _ref2.md,\n      lg = _ref2.lg,\n      xlg = _ref2.xlg,\n      max = _ref2.max,\n      span = _ref2.span,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var prefix = usePrefix();\n  var breakpointClassName = getClassNameForBreakpoints([sm, md, lg, xlg, max], prefix);\n  var spanClassName = getClassNameForSpan(span, prefix);\n  var className = cx(containerClassName, breakpointClassName, spanClassName, _defineProperty({}, \"\".concat(prefix, \"--css-grid-column\"), true));\n  return /*#__PURE__*/React__default.createElement(BaseComponent, _extends({\n    className: className\n  }, rest), children);\n}\n\nCSSGridColumn.propTypes = {\n  /**\n   * Provide a custom element to render instead of the default <div>\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Pass in content that will be rendered within the `Column`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify a custom className to be applied to the `Column`\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify column span for the `lg` breakpoint (Default breakpoint up to 1312px)\n   * This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  lg: spanPropType,\n\n  /**\n   * Specify column span for the `max` breakpoint. This breakpoint supports 16\n   * columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  max: spanPropType,\n\n  /**\n   * Specify column span for the `md` breakpoint (Default breakpoint up to 1056px)\n   * This breakpoint supports 8 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  md: spanPropType,\n\n  /**\n   * Specify column span for the `sm` breakpoint (Default breakpoint up to 672px)\n   * This breakpoint supports 4 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  sm: spanPropType,\n\n  /**\n   * Specify constant column span, start,  or end values that will not change\n   * based on breakpoint\n   */\n  span: PropTypes.oneOfType([PropTypes.number, percentSpanType, PropTypes.shape({\n    span: PropTypes.oneOfType([PropTypes.number, percentSpanType]),\n    start: PropTypes.number,\n    end: PropTypes.number\n  })]),\n\n  /**\n   * Specify column span for the `xlg` breakpoint (Default breakpoint up to\n   * 1584px) This breakpoint supports 16 columns by default.\n   *\n   * @see https://www.carbondesignsystem.com/guidelines/layout#breakpoints\n   */\n  xlg: spanPropType\n};\nvar breakpointNames = ['sm', 'md', 'lg', 'xlg', 'max'];\n/**\n * @typedef {object} Breakpoint\n * @property {boolean|number} [span]\n * @property {number} [offset]\n */\n\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\nfunction getClassNameForBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-auto\"));\n      continue;\n    } // If our breakpoint is a string, the user has specified a percent\n    // they'd like this column to span.\n\n\n    if (typeof breakpoint === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint.slice(0, -1)));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset,\n        start = breakpoint.start,\n        end = breakpoint.end;\n\n    if (typeof offset === 'number' && offset > 0) {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(offset + 1));\n    }\n\n    if (typeof start === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-start-\").concat(start));\n    }\n\n    if (typeof end === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-end-\").concat(end));\n    }\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span));\n    } else if (typeof span === 'string') {\n      classNames.push(\"\".concat(prefix, \"--\").concat(name, \":col-span-\").concat(span.slice(0, -1)));\n      continue;\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for the given set of breakpoints.\n * @param {Array<boolean|number|Breakpoint>} breakpoints\n * @returns {string}\n */\n\n\nfunction getClassNameForFlexGridBreakpoints(breakpoints, prefix) {\n  var classNames = [];\n\n  for (var i = 0; i < breakpoints.length; i++) {\n    var breakpoint = breakpoints[i];\n\n    if (breakpoint === undefined || breakpoint === null) {\n      continue;\n    }\n\n    var name = breakpointNames[i]; // If our breakpoint is a boolean, the user has specified that the column\n    // should be \"auto\" at this size\n\n    if (breakpoint === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n      continue;\n    } // If our breakpoint is a number, the user has specified the number of\n    // columns they'd like this column to span\n\n\n    if (typeof breakpoint === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(breakpoint));\n      continue;\n    }\n\n    var span = breakpoint.span,\n        offset = breakpoint.offset;\n\n    if (typeof span === 'number') {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name, \"-\").concat(span));\n    }\n\n    if (span === true) {\n      classNames.push(\"\".concat(prefix, \"--col-\").concat(name));\n    }\n\n    if (typeof offset === 'number') {\n      classNames.push(\"\".concat(prefix, \"--offset-\").concat(name, \"-\").concat(offset));\n    }\n  }\n\n  return classNames.join(' ');\n}\n/**\n * Build the appropriate className for a span value\n */\n\n\nfunction getClassNameForSpan(value, prefix) {\n  var classNames = [];\n\n  if (typeof value === 'number' || typeof value === 'string') {\n    classNames.push(\"\".concat(prefix, \"--col-span-\").concat(value));\n  } else if (_typeof(value) === 'object') {\n    var span = value.span,\n        start = value.start,\n        end = value.end;\n\n    if (span !== undefined && span !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-span-\").concat(span));\n    }\n\n    if (start !== undefined && start !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-start-\").concat(start));\n    }\n\n    if (end !== undefined && end !== null) {\n      classNames.push(\"\".concat(prefix, \"--col-end-\").concat(end));\n    }\n  }\n\n  return classNames.join('');\n}\n\nexport { Column as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}