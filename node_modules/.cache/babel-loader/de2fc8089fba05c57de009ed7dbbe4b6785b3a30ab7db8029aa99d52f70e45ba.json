{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implementation of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @param {Function} config.getCellId\n * @returns {Array<string>} rowIds\n */\nvar defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n    headers = _ref.headers,\n    cellsById = _ref.cellsById,\n    inputValue = _ref.inputValue,\n    getCellId = _ref.getCellId;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = getCellId(rowId, key);\n      if (typeof cellsById[id].value === 'boolean') {\n        return false;\n      }\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};\nexport { defaultFilterRows };","map":{"version":3,"names":["defaultFilterRows","_ref","rowIds","headers","cellsById","inputValue","getCellId","filter","rowId","some","_ref2","key","id","value","toLowerCase","includes"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/DataTable/tools/filter.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Default implementation of how we filter rows internally. The idea behind this\n * implementation is to use the given list of row ids and headers to get the\n * individual cell values for a row. Then, we go through each cell value and see\n * if any of them includes the given inputValue.\n *\n * @param {object} config\n * @param {Array<string>} config.rowIds array of all the row ids in the table\n * @param {Array<object>} config.headers\n * @param {object} config.cellsById object containing a map of cell id to cell\n * @param {string} config.inputValue the current input value in the Table Search\n * @param {Function} config.getCellId\n * @returns {Array<string>} rowIds\n */\nvar defaultFilterRows = function defaultFilterRows(_ref) {\n  var rowIds = _ref.rowIds,\n      headers = _ref.headers,\n      cellsById = _ref.cellsById,\n      inputValue = _ref.inputValue,\n      getCellId = _ref.getCellId;\n  return rowIds.filter(function (rowId) {\n    return headers.some(function (_ref2) {\n      var key = _ref2.key;\n      var id = getCellId(rowId, key);\n\n      if (typeof cellsById[id].value === 'boolean') {\n        return false;\n      }\n\n      return ('' + cellsById[id].value).toLowerCase().includes(inputValue.toLowerCase());\n    });\n  });\n};\n\nexport { defaultFilterRows };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,iBAAiB,GAAG,SAASA,iBAAiB,CAACC,IAAI,EAAE;EACvD,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACpBC,OAAO,GAAGF,IAAI,CAACE,OAAO;IACtBC,SAAS,GAAGH,IAAI,CAACG,SAAS;IAC1BC,UAAU,GAAGJ,IAAI,CAACI,UAAU;IAC5BC,SAAS,GAAGL,IAAI,CAACK,SAAS;EAC9B,OAAOJ,MAAM,CAACK,MAAM,CAAC,UAAUC,KAAK,EAAE;IACpC,OAAOL,OAAO,CAACM,IAAI,CAAC,UAAUC,KAAK,EAAE;MACnC,IAAIC,GAAG,GAAGD,KAAK,CAACC,GAAG;MACnB,IAAIC,EAAE,GAAGN,SAAS,CAACE,KAAK,EAAEG,GAAG,CAAC;MAE9B,IAAI,OAAOP,SAAS,CAACQ,EAAE,CAAC,CAACC,KAAK,KAAK,SAAS,EAAE;QAC5C,OAAO,KAAK;MACd;MAEA,OAAO,CAAC,EAAE,GAAGT,SAAS,CAACQ,EAAE,CAAC,CAACC,KAAK,EAAEC,WAAW,EAAE,CAACC,QAAQ,CAACV,UAAU,CAACS,WAAW,EAAE,CAAC;IACpF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,SAASd,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}