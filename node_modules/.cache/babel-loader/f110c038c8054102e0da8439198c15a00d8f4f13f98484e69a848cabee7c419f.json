{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport ComboBox from '../ComboBox/ComboBox.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\nvar _excluded = [\"className\", \"isCondensed\"];\nvar FluidComboBox = /*#__PURE__*/React__default.forwardRef(function FluidComboBox(_ref, ref) {\n  var className = _ref.className,\n    isCondensed = _ref.isCondensed,\n    other = _objectWithoutProperties(_ref, _excluded);\n  var prefix = usePrefix();\n  var classNames = cx(\"\".concat(prefix, \"--list-box__wrapper--fluid\"), className, _defineProperty({}, \"\".concat(prefix, \"--list-box__wrapper--fluid--condensed\"), isCondensed));\n  return /*#__PURE__*/React__default.createElement(FormContext.Provider, {\n    value: {\n      isFluid: true\n    }\n  }, /*#__PURE__*/React__default.createElement(ComboBox, _extends({\n    ref: ref,\n    className: classNames\n  }, other)));\n});\nFluidComboBox.propTypes = {\n  /**\n   * Specify an optional className to be applied to the outer FluidForm wrapper\n   */\n  className: PropTypes.string,\n  /**\n   * Specify the direction of the dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Specify if the `FluidComboBox` should render its menu items in condensed mode\n   */\n  isCondensed: PropTypes.bool,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n  /**\n   * An optional callback to render the currently selected item as a react element instead of only\n   * as a string.\n   */\n  renderSelectedItem: PropTypes.func,\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\nexport { FluidComboBox as default };","map":{"version":3,"names":["objectWithoutProperties","_objectWithoutProperties","defineProperty","_defineProperty","extends","_extends","PropTypes","React__default","cx","ComboBox","usePrefix","FormContext","_excluded","FluidComboBox","forwardRef","_ref","ref","className","isCondensed","other","prefix","classNames","concat","createElement","Provider","value","isFluid","propTypes","string","direction","oneOf","disabled","bool","id","isRequired","initialSelectedItem","oneOfType","object","number","invalid","invalidText","node","itemToElement","func","itemToString","items","array","label","onChange","renderSelectedItem","selectedItem","titleText","translateWithId","warn","warnText","default"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/FluidComboBox/FluidComboBox.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport ComboBox from '../ComboBox/ComboBox.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { FormContext } from '../FluidForm/FormContext.js';\n\nvar _excluded = [\"className\", \"isCondensed\"];\nvar FluidComboBox = /*#__PURE__*/React__default.forwardRef(function FluidComboBox(_ref, ref) {\n  var className = _ref.className,\n      isCondensed = _ref.isCondensed,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var prefix = usePrefix();\n  var classNames = cx(\"\".concat(prefix, \"--list-box__wrapper--fluid\"), className, _defineProperty({}, \"\".concat(prefix, \"--list-box__wrapper--fluid--condensed\"), isCondensed));\n  return /*#__PURE__*/React__default.createElement(FormContext.Provider, {\n    value: {\n      isFluid: true\n    }\n  }, /*#__PURE__*/React__default.createElement(ComboBox, _extends({\n    ref: ref,\n    className: classNames\n  }, other)));\n});\nFluidComboBox.propTypes = {\n  /**\n   * Specify an optional className to be applied to the outer FluidForm wrapper\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the direction of the dropdown. Can be either top or bottom.\n   */\n  direction: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Specify whether the `<input>` should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify a custom `id` for the `<input>`\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.node,\n\n  /**\n   * Specify if the `FluidComboBox` should render its menu items in condensed mode\n   */\n  isCondensed: PropTypes.bool,\n\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: PropTypes.func,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * An optional callback to render the currently selected item as a react element instead of only\n   * as a string.\n   */\n  renderSelectedItem: PropTypes.func,\n\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.number]),\n\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: PropTypes.node,\n\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: PropTypes.node\n};\n\nexport { FluidComboBox as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}