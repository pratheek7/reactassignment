{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useState, useContext } from 'react';\nimport { Popover, PopoverContent } from '../Popover/index.js';\nimport { Escape } from '../../internal/keyboard/keys.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { useWindowEvent } from '../../internal/useEvent.js';\nimport { useId } from '../../internal/useId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\n/**\n * Used to render the label for a Toggletip\n */\n\nfunction ToggletipLabel(_ref) {\n  var _ref$as = _ref.as,\n    BaseComponent = _ref$as === void 0 ? 'span' : _ref$as,\n    children = _ref.children,\n    customClassName = _ref.className;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--toggletip-label\"), customClassName);\n  return /*#__PURE__*/React__default.createElement(BaseComponent, {\n    className: className\n  }, children);\n}\nToggletipLabel.propTypes = {\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n}; // Used to coordinate accessibility props between button and content along with\n// the actions to open and close the toggletip\n\nvar ToggletipContext = /*#__PURE__*/React__default.createContext();\nfunction useToggletip() {\n  return useContext(ToggletipContext);\n}\n/**\n * Used as a container for the button and content of a toggletip. This component\n * is responsible for coordinating between interactions with the button and the\n * visibility of the content\n */\n\nfunction Toggletip(_ref2) {\n  var align = _ref2.align,\n    as = _ref2.as,\n    customClassName = _ref2.className,\n    children = _ref2.children,\n    _ref2$defaultOpen = _ref2.defaultOpen,\n    defaultOpen = _ref2$defaultOpen === void 0 ? false : _ref2$defaultOpen;\n  var ref = useRef();\n  var _useState = useState(defaultOpen),\n    _useState2 = _slicedToArray(_useState, 2),\n    open = _useState2[0],\n    setOpen = _useState2[1];\n  var prefix = usePrefix();\n  var id = useId();\n  var className = cx(\"\".concat(prefix, \"--toggletip\"), customClassName, _defineProperty({}, \"\".concat(prefix, \"--toggletip--open\"), open));\n  var actions = {\n    toggle: function toggle() {\n      setOpen(!open);\n    },\n    close: function close() {\n      setOpen(false);\n    }\n  };\n  var value = {\n    buttonProps: {\n      'aria-expanded': open,\n      'aria-controls': id,\n      onClick: actions.toggle\n    },\n    contentProps: {\n      id: id\n    }\n  };\n  function onKeyDown(event) {\n    if (open && match(event, Escape)) {\n      actions.close();\n    }\n  }\n  useWindowEvent('click', function (event) {\n    if (open && !ref.current.contains(event.target)) {\n      actions.close();\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(ToggletipContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React__default.createElement(Popover, {\n    align: align,\n    as: as,\n    caret: true,\n    className: className,\n    dropShadow: false,\n    highContrast: true,\n    open: open,\n    onKeyDown: onKeyDown,\n    ref: ref\n  }, children));\n}\nToggletip.propTypes = {\n  /**\n   * Specify how the toggletip should align with the button\n   */\n  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Specify if the toggletip should be open by default\n   */\n  defaultOpen: PropTypes.bool\n};\n/**\n * `ToggletipButton` controls the visibility of the Toggletip through mouse\n * clicks and keyboard interactions.\n */\n\nfunction ToggletipButton(_ref3) {\n  var children = _ref3.children,\n    customClassName = _ref3.className,\n    _ref3$label = _ref3.label,\n    label = _ref3$label === void 0 ? 'Show information' : _ref3$label;\n  var toggletip = useToggletip();\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--toggletip-button\"), customClassName);\n  return /*#__PURE__*/React__default.createElement(\"button\", _extends({}, toggletip.buttonProps, {\n    \"aria-label\": label,\n    type: \"button\",\n    className: className\n  }), children);\n}\nToggletipButton.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n  /**\n   * Provide an accessible label for this button\n   */\n  label: PropTypes.string\n};\n/**\n * `ToggletipContent` is a wrapper around `PopoverContent`. It places the\n * `children` passed in as a prop inside of `PopoverContent` so that they will\n * be rendered inside of the popover for this component.\n */\n\nfunction ToggletipContent(_ref4) {\n  var children = _ref4.children,\n    customClassName = _ref4.className;\n  var toggletip = useToggletip();\n  var prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(PopoverContent, _extends({\n    className: customClassName\n  }, toggletip.contentProps), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--toggletip-content\")\n  }, children));\n}\nToggletipContent.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n/**\n * `ToggletipActions` is a container for one or two actions present at the base\n * of a toggletip. It is used for layout of these items.\n */\n\nfunction ToggletipActions(_ref5) {\n  var children = _ref5.children,\n    customClassName = _ref5.className;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--toggletip-actions\"), customClassName);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: className\n  }, children);\n}\nToggletipActions.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\nexport { Toggletip, ToggletipActions, ToggletipButton, ToggletipContent, ToggletipLabel };","map":{"version":3,"names":["slicedToArray","_slicedToArray","defineProperty","_defineProperty","extends","_extends","cx","PropTypes","React__default","useRef","useState","useContext","Popover","PopoverContent","Escape","match","useWindowEvent","useId","usePrefix","ToggletipLabel","_ref","_ref$as","as","BaseComponent","children","customClassName","className","prefix","concat","createElement","propTypes","oneOfType","string","elementType","node","ToggletipContext","createContext","useToggletip","Toggletip","_ref2","align","_ref2$defaultOpen","defaultOpen","ref","_useState","_useState2","open","setOpen","id","actions","toggle","close","value","buttonProps","onClick","contentProps","onKeyDown","event","current","contains","target","Provider","caret","dropShadow","highContrast","oneOf","bool","ToggletipButton","_ref3","_ref3$label","label","toggletip","type","ToggletipContent","_ref4","ToggletipActions","_ref5"],"sources":["C:/Users/Administrator/Desktop/nerf/node_modules/@carbon/react/es/components/Toggletip/index.js"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2022\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React__default, { useRef, useState, useContext } from 'react';\nimport { Popover, PopoverContent } from '../Popover/index.js';\nimport { Escape } from '../../internal/keyboard/keys.js';\nimport { match } from '../../internal/keyboard/match.js';\nimport { useWindowEvent } from '../../internal/useEvent.js';\nimport { useId } from '../../internal/useId.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\n\n/**\n * Used to render the label for a Toggletip\n */\n\nfunction ToggletipLabel(_ref) {\n  var _ref$as = _ref.as,\n      BaseComponent = _ref$as === void 0 ? 'span' : _ref$as,\n      children = _ref.children,\n      customClassName = _ref.className;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--toggletip-label\"), customClassName);\n  return /*#__PURE__*/React__default.createElement(BaseComponent, {\n    className: className\n  }, children);\n}\n\nToggletipLabel.propTypes = {\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n}; // Used to coordinate accessibility props between button and content along with\n// the actions to open and close the toggletip\n\nvar ToggletipContext = /*#__PURE__*/React__default.createContext();\n\nfunction useToggletip() {\n  return useContext(ToggletipContext);\n}\n/**\n * Used as a container for the button and content of a toggletip. This component\n * is responsible for coordinating between interactions with the button and the\n * visibility of the content\n */\n\n\nfunction Toggletip(_ref2) {\n  var align = _ref2.align,\n      as = _ref2.as,\n      customClassName = _ref2.className,\n      children = _ref2.children,\n      _ref2$defaultOpen = _ref2.defaultOpen,\n      defaultOpen = _ref2$defaultOpen === void 0 ? false : _ref2$defaultOpen;\n  var ref = useRef();\n\n  var _useState = useState(defaultOpen),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var prefix = usePrefix();\n  var id = useId();\n  var className = cx(\"\".concat(prefix, \"--toggletip\"), customClassName, _defineProperty({}, \"\".concat(prefix, \"--toggletip--open\"), open));\n  var actions = {\n    toggle: function toggle() {\n      setOpen(!open);\n    },\n    close: function close() {\n      setOpen(false);\n    }\n  };\n  var value = {\n    buttonProps: {\n      'aria-expanded': open,\n      'aria-controls': id,\n      onClick: actions.toggle\n    },\n    contentProps: {\n      id: id\n    }\n  };\n\n  function onKeyDown(event) {\n    if (open && match(event, Escape)) {\n      actions.close();\n    }\n  }\n\n  useWindowEvent('click', function (event) {\n    if (open && !ref.current.contains(event.target)) {\n      actions.close();\n    }\n  });\n  return /*#__PURE__*/React__default.createElement(ToggletipContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React__default.createElement(Popover, {\n    align: align,\n    as: as,\n    caret: true,\n    className: className,\n    dropShadow: false,\n    highContrast: true,\n    open: open,\n    onKeyDown: onKeyDown,\n    ref: ref\n  }, children));\n}\n\nToggletip.propTypes = {\n  /**\n   * Specify how the toggletip should align with the button\n   */\n  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),\n\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType]),\n\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if the toggletip should be open by default\n   */\n  defaultOpen: PropTypes.bool\n};\n/**\n * `ToggletipButton` controls the visibility of the Toggletip through mouse\n * clicks and keyboard interactions.\n */\n\nfunction ToggletipButton(_ref3) {\n  var children = _ref3.children,\n      customClassName = _ref3.className,\n      _ref3$label = _ref3.label,\n      label = _ref3$label === void 0 ? 'Show information' : _ref3$label;\n  var toggletip = useToggletip();\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--toggletip-button\"), customClassName);\n  return /*#__PURE__*/React__default.createElement(\"button\", _extends({}, toggletip.buttonProps, {\n    \"aria-label\": label,\n    type: \"button\",\n    className: className\n  }), children);\n}\n\nToggletipButton.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide an accessible label for this button\n   */\n  label: PropTypes.string\n};\n/**\n * `ToggletipContent` is a wrapper around `PopoverContent`. It places the\n * `children` passed in as a prop inside of `PopoverContent` so that they will\n * be rendered inside of the popover for this component.\n */\n\nfunction ToggletipContent(_ref4) {\n  var children = _ref4.children,\n      customClassName = _ref4.className;\n  var toggletip = useToggletip();\n  var prefix = usePrefix();\n  return /*#__PURE__*/React__default.createElement(PopoverContent, _extends({\n    className: customClassName\n  }, toggletip.contentProps), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--toggletip-content\")\n  }, children));\n}\n\nToggletipContent.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n/**\n * `ToggletipActions` is a container for one or two actions present at the base\n * of a toggletip. It is used for layout of these items.\n */\n\nfunction ToggletipActions(_ref5) {\n  var children = _ref5.children,\n      customClassName = _ref5.className;\n  var prefix = usePrefix();\n  var className = cx(\"\".concat(prefix, \"--toggletip-actions\"), customClassName);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: className\n  }, children);\n}\n\nToggletipActions.propTypes = {\n  /**\n   * Custom children to be rendered as the content of the label\n   */\n  children: PropTypes.node,\n\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: PropTypes.string\n};\n\nexport { Toggletip, ToggletipActions, ToggletipButton, ToggletipContent, ToggletipLabel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}